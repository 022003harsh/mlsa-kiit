generator client {
  provider = "prisma-client-js"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum POSITION {
  LEAD //  Anvit Dubey
  VICE_LEAD //  Saniya Bhargav
  TECH_LEAD // Prashant Upadhyay, Atig Purohit, Akshita Sah
  EXECUTIVE //  Swastika Bishnoi
  CREATIVE_LEAD //  Mayank Jain
  CONTENT_LEAD //  Aradhya Kumar
  MARKETING_LEAD //  Ayush Raj
  PR_CR_LEAD //  Rishab Barik // Public Relations and Corporate Relations
  MEMBER //  All others
  ALUMNI //  Past Members
}

enum ROLE {
  // Tech Team
  BACKEND
  FRONTEND
  AI_ML
  APP
  AR_VR
  CLOUD
  CYBER_SECURITY

  // Creative Team
  CONTENT
  YOUTUBE
  DESIGNER
  VIDEO_EDITOR
  UI_UX

  // Marketing Team
  PR_CR
}

model Member {
  id            String  @id @default(uuid())
  name          String
  personalEmail String  @unique
  kiitEmail     String  @unique
  password      String
  imageUrl      String
  githubUrl     String
  linkedinUrl   String
  portfolioUrl  String?

  position      POSITION    @default(MEMBER)
  role          ROLE
  issueResolved ContactUs[]
}

model ContactUs {
  id              String   @id @default(uuid())
  name            String
  email           String
  message         String
  issue_resolved  Boolean? @default(false)
  memberId        String
  issueResolvedBy Member?  @relation(fields: [memberId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// When a student registers for an event, we create a Student 
// record of him/her in the Students table and all event records
// that he/she is registered for in the Events table.
// Caviat: Student will use it to get details of other students.
// So for now we will only store the data of the students and not
// use it for any other purpose.

model Students {
  id            String @id @default(uuid())
  name          String
  rollNumber    Int    @unique
  currentYear   Int
  branch        String
  kiitEmail     String @unique
  personalEmail String
  phoneNumber   Int
  linkedin      String
  github        String
}

// model Event {
//     id          String        @id @default(uuid())
//     EventMember EventMember[]
// }

// model EventMember {
//     id       String @id @default(uuid())
//     eventId  String
//     memberId String
//     event    Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
//     member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
// }

// model EventRegistration {
//   id                    String @id @default(auto()) @map("_id") @db.ObjectId
//   eventId               String
//   name                  String
//   roll                  Int    @unique
//   currentYear           Int
//   Branch                String
//   kiitEmail             String @unique
//   personalEmail         String @unique
//   phoneNumber           String @unique
//   linkedin              String @unique
//   Github                String @unique
//   expectationsFromEvent String
// }
